#!/usr/bin/env python3
"""
Convert GIF file to C array for embedding in ESP32 firmware
"""

import sys
import os

def gif_to_c_array(gif_path, output_path=None, array_name="gif_data"):
    """Convert GIF file to complete C++ source file"""

    if not os.path.exists(gif_path):
        print(f"Error: GIF file '{gif_path}' not found")
        return False

    # Read GIF file
    with open(gif_path, 'rb') as f:
        gif_data = f.read()

    print(f"GIF file size: {len(gif_data)} bytes")

    # Generate complete C++ file
    cpp_content = f"""// Auto-generated from {os.path.basename(gif_path)}
// File size: {len(gif_data)} bytes
// Generated by gif_to_c_array.py

#include "gif_test.h"
#include "application.h"
#include <esp_log.h>

static const char* TAG = "GifTest";

// Real GIF data converted from {os.path.basename(gif_path)}
const uint8_t test_gif_data[] = {{
"""

    # Write bytes in rows of 12
    for i in range(0, len(gif_data), 12):
        row = gif_data[i:i+12]
        hex_values = [f"0x{b:02X}" for b in row]
        cpp_content += "    " + ", ".join(hex_values)
        if i + 12 < len(gif_data):
            cpp_content += ","
        cpp_content += "\n"

    cpp_content += f"""}};\n
const size_t test_gif_size = sizeof(test_gif_data);

void test_gif_display() {{
    ESP_LOGI(TAG, "Starting real GIF display test with {os.path.basename(gif_path)} - ESP32-S3 + PSRAM");
    ESP_LOGI(TAG, "GIF file size: %zu bytes", test_gif_size);

    auto& app = Application::GetInstance();

    // 显示真实的GIF，居中显示
    app.ShowGif(test_gif_data, test_gif_size, 0, 0);

    ESP_LOGI(TAG, "Real GIF test completed. You should see the actual {os.path.basename(gif_path)} animation!");
    ESP_LOGI(TAG, "This demonstrates ESP32-S3 + PSRAM's real-world GIF capabilities!");
}}
"""

    # Output to file or console
    if output_path:
        with open(output_path, 'w') as f:
            f.write(cpp_content)
        print(f"Complete C++ file written to: {output_path}")
    else:
        print("\n" + "="*60)
        print("C++ File Output:")
        print("="*60)
        print(cpp_content)

    return True

def main():
    if len(sys.argv) < 2:
        print("Usage: python gif_to_c_array.py <gif_file> [output_file] [array_name]")
        print("Example: python gif_to_c_array.py ag.gif ag_gif_data.h ag_gif_data")
        return
    
    gif_path = sys.argv[1]
    output_path = sys.argv[2] if len(sys.argv) > 2 else None
    array_name = sys.argv[3] if len(sys.argv) > 3 else "gif_data"
    
    gif_to_c_array(gif_path, output_path, array_name)

if __name__ == "__main__":
    main()
